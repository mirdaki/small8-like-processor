library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity controler is
    generic (
        WIDTH : positive := 16);
    port (
        clk    : in  std_logic;
        rst    : in  std_logic;
        go     : in  std_logic;
        done   : out std_logic;
		  
		  -- Control signals 
		  x_sel     : out  std_logic;
		  y_sel     : out  std_logic;
		  x_en      : out  std_logic;
		  y_en      : out  std_logic;
		  output_en : out  std_logic;
		  x_lt_y    : in   std_logic;
		  x_ne_y    : in   std_logic);
end controler;

architecture twoProc of controler is

	type state_type is (S_INIT, S_LOAD, S_LOGIC, S_DONE);

   signal state, next_state : state_type;

begin 
	 
	process(clk, rst)
   begin   
	 
		if (rst = '1') then
			state     <= S_INIT;
		elsif (rising_edge(clk)) then
			state <= next_state;
		end if;
	end process;
	
	process(state, go, x_lt_y, x_ne_y)
	begin
	
		x_sel     <= '0';
		y_sel     <= '0';
		x_en      <= '0';
		y_en      <= '0';
		output_en <= '0';
		done      <= '0';

    case state is

        when S_INIT =>
				if (go = '1') then
					done <= '0';
					x_en <= '1';
					y_en <= '1';
					next_state <= S_LOAD;
				end if;

		  when S_LOAD =>				
				next_state <= S_LOGIC;
				
        when S_LOGIC =>
				if (x_ne_y = '1') then 
					if (x_lt_y = '1') then
						y_en  <= '1';
						y_sel <= '1';
					else 
						x_en  <= '1';
						x_sel <= '1';
					end if;
					--x_en <= '1';
					--y_en <= '1';
					next_state <= S_LOAD;
				else 
					output_en <= '1';
					next_state <= S_DONE;
				end if;

        when S_DONE =>
            done <= '1';
            if (go = '0') then
                next_state <= S_INIT;
            end if;

        when others =>
            null;

        end case;
		  
    end process;
end twoProc;